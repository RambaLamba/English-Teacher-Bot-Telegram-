import random
import logging
from telebot import TeleBot, types
from telebot.apihelper import ApiTelegramException
from config import BOT_TOKEN
from data_base import (
    init_database, save_word, get_random_word,
    get_other_words, delete_word, get_user_words
)


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

bot = TeleBot(BOT_TOKEN, parse_mode="HTML")

init_database()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
data = {}

MENU_BUTTONS = {
    'STUDY': '–£—á–∏—Ç—å —Å–ª–æ–≤–∞ üöÄ',
    'DICTIONARY': '–ú–æ–π —Å–ª–æ–≤–∞—Ä—å üìö',
    'ADD_WORD': '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï',
    'DELETE_WORD': '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô',
    'MAIN_MENU': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚óÄÔ∏è',
    'SKIP': '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è',
    'CANCEL': '–û—Ç–º–µ–Ω–∞ ‚ùå'
}


def clean_text(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤, –∫–∞–≤—ã—á–µ–∫ –∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not text:
        return ""
    text = text.strip().strip("'").strip('"').encode('utf-8').decode('utf-8')
    return text


@bot.message_handler(commands=['start'])
def send_welcome(obj):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        if isinstance(obj, types.Message):
            chat_id = obj.chat.id
            user_id = obj.from_user.id
        elif isinstance(obj, types.CallbackQuery):
            chat_id = obj.message.chat.id
            user_id = obj.from_user.id
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞: {type(obj)}")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(MENU_BUTTONS['STUDY'], MENU_BUTTONS['DICTIONARY'])
        markup.row(MENU_BUTTONS['ADD_WORD'], MENU_BUTTONS['DELETE_WORD'])

        bot.send_message(
            chat_id,
            '<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ</b>\n\n'
            '–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞! üìñ\n'
            '–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.',
            reply_markup=markup
        )

        data.pop(chat_id, None)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    except ApiTelegramException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        if "chat not found" in str(e).lower():
            logging.warning(f"–ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            bot.send_message(chat_id, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ send_welcome: {e}")
        bot.send_message(chat_id, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


@bot.message_handler(func=lambda m: clean_text(m.text) == MENU_BUTTONS['ADD_WORD'])
def start_adding_word(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(MENU_BUTTONS['CANCEL'], MENU_BUTTONS['MAIN_MENU'])

    bot.send_message(
        message.chat.id,
        'üìù –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–†—É—Å—Å–∫–∏–π - English</b>\n'
        '–ü—Ä–∏–º–µ—Ä: <i>–î–æ–º - House</i>',
        reply_markup=markup
    )
    data[message.chat.id] = {'mode': 'adding_word'}
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞")


@bot.message_handler(func=lambda m: clean_text(m.text) in [MENU_BUTTONS['CANCEL'], MENU_BUTTONS['MAIN_MENU']])
def cancel_or_menu(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    data.pop(message.chat.id, None)
    send_welcome(message)


@bot.message_handler(func=lambda m: clean_text(m.text) == MENU_BUTTONS['DELETE_WORD'])
def start_deleting_word(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    words = get_user_words(message.from_user.id)

    if not words:
        bot.send_message(message.chat.id, 'üì≠ –í–∞—à –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç!')
        return

    markup = types.InlineKeyboardMarkup(row_width=1)
    for word_id, russian, english in words:
        markup.add(types.InlineKeyboardButton(
            f'{russian} - {english}',
            callback_data=f'delete_{word_id}'
        ))

    markup.add(types.InlineKeyboardButton(MENU_BUTTONS['CANCEL'], callback_data='cancel_delete'))

    bot.send_message(
        message.chat.id,
        'üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
        reply_markup=markup
    )
    data.pop(message.chat.id, None)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤")


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def handle_delete(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞"""
    try:
        chat_id = call.message.chat.id
        word_id = int(call.data.split('_')[1])
        if delete_word(call.from_user.id, word_id):
            bot.answer_callback_query(call.id, '‚úÖ –°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ!')
            bot.delete_message(chat_id, call.message.message_id)
            bot.send_message(chat_id, '–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')
        else:
            bot.answer_callback_query(call.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!')
            bot.send_message(chat_id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞.')
        send_welcome(call)
    except ApiTelegramException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
        bot.answer_callback_query(call.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!')
        bot.send_message(call.from_user.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        send_welcome(call)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
        bot.answer_callback_query(call.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!')
        bot.send_message(call.from_user.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        send_welcome(call)


@bot.callback_query_handler(func=lambda call: call.data == 'cancel_delete')
def cancel_delete(call):
    """–û—Ç–º–µ–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞"""
    try:
        chat_id = call.message.chat.id
        bot.delete_message(chat_id, call.message.message_id)
        bot.answer_callback_query(call.id)
        send_welcome(call)
    except ApiTelegramException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        bot.answer_callback_query(call.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ!')
        bot.send_message(call.from_user.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        send_welcome(call)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        bot.answer_callback_query(call.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ!')
        bot.send_message(call.from_user.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        send_welcome(call)


@bot.message_handler(func=lambda m: clean_text(m.text) == MENU_BUTTONS['DICTIONARY'])
def show_user_words(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    words = get_user_words(message.from_user.id)

    if not words:
        bot.send_message(message.chat.id, 'üì≠ –í–∞—à –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç!')
        return

    response = 'üìö <b>–í–∞—à–∏ —Å–ª–æ–≤–∞:</b>\n\n'
    for _, russian, english in words:
        response += f'‚Ä¢ {russian} - {english}\n'

    bot.send_message(message.chat.id, response)
    data.pop(message.chat.id, None)  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å")


@bot.message_handler(func=lambda m: clean_text(m.text) == MENU_BUTTONS['STUDY'])
def start_quiz(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∫–≤–∏–∑"""
    word = get_random_word(message.from_user.id)

    if not word or not word[0]:
        bot.send_message(
            message.chat.id,
            'üì≠ –í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—â–∏–µ —Å–ª–æ–≤–∞.'
        )
        return

    word_id, russian, english = word
    other_words = get_other_words(message.from_user.id, english)
    variants = [english] + other_words[:3]
    random.shuffle(variants)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    cleaned_variants = [clean_text(v) for v in variants]
    for word in cleaned_variants:
        markup.add(types.KeyboardButton(word))
    markup.row(MENU_BUTTONS['SKIP'], MENU_BUTTONS['MAIN_MENU'])

    sent_message = bot.send_message(
        message.chat.id,
        f'–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: <b>{russian}</b>?',
        reply_markup=markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞
    data[message.chat.id] = {
        'mode': 'quiz',
        'message_id': sent_message.message_id,
        'correct': clean_text(english),
        'russian': russian,
        'variants': cleaned_variants,
        'word_id': word_id
    }

    logging.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –∫–≤–∏–∑, —Å–ª–æ–≤–æ: {russian}, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {data[message.chat.id]['correct']}, –≤–∞—Ä–∏–∞–Ω—Ç—ã: {cleaned_variants}, raw_variants: {variants}")


@bot.message_handler(content_types=['text'])
def check_answer(message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ –∫–≤–∏–∑–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞"""
    cleaned_text = clean_text(message.text)
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: raw='{repr(message.text)}', cleaned='{cleaned_text}'")

    if message.chat.id not in data:
        logging.info(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è chat_id: {message.chat.id}")
        handle_other_messages(message)
        return

    mode = data[message.chat.id].get('mode')

    if mode == 'adding_word':
        process_new_word(message)
        return

    if mode == 'quiz':
        quiz = data[message.chat.id]
        correct = quiz['correct']
        russian = quiz['russian']
        variants = quiz['variants']
        message_id = quiz['message_id']

        logging.info(
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–≤–∏–∑–µ: cleaned_text='{cleaned_text}', correct='{correct}', variants={variants}, quiz_message_id={message_id}")

        if cleaned_text in [MENU_BUTTONS['MAIN_MENU'], MENU_BUTTONS['CANCEL']]:
            data.pop(message.chat.id, None)
            send_welcome(message)
            return

        if cleaned_text == MENU_BUTTONS['SKIP']:
            bot.send_message(
                message.chat.id,
                f'‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct}</b>',
                reply_markup=types.ReplyKeyboardRemove()
            )
            data.pop(message.chat.id, None)
            start_quiz(message)
            return

        cleaned_text_lower = cleaned_text.lower()
        variants_lower = [v.lower() for v in variants]

        if cleaned_text_lower in variants_lower:
            if cleaned_text_lower == correct.lower():
                bot.send_message(
                    message.chat.id,
                    random.choice(['‚úÖ –û—Ç–ª–∏—á–Ω–æ!', 'üëç –ú–æ–ª–æ–¥–µ—Ü!', 'üéØ –í —Ç–æ—á–∫—É!']),
                    reply_markup=types.ReplyKeyboardRemove()
                )
                data.pop(message.chat.id, None)
                start_quiz(message)
            else:
                bot.send_message(
                    message.chat.id,
                    f'‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è —Å–ª–æ–≤–∞: <b>{russian}</b>'
                )
        else:
            bot.send_message(
                message.chat.id,
                f'ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:\n'
                f'‚Ä¢ {MENU_BUTTONS["SKIP"]}\n'
                f'‚Ä¢ {MENU_BUTTONS["MAIN_MENU"]}'
            )
    else:
        logging.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è chat_id: {message.chat.id}, mode: {mode}")
        handle_other_messages(message)


def process_new_word(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ"""
    cleaned_text = clean_text(message.text)
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞: raw='{repr(message.text)}', cleaned='{cleaned_text}'")

    try:
        if '-' not in cleaned_text:
            bot.send_message(
                message.chat.id,
                '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>–†—É—Å—Å–∫–∏–π - English</b>\n'
                '–ü—Ä–∏–º–µ—Ä: <i>–î–æ–º - House</i>'
            )
            return

        russian, english = [part.strip() for part in cleaned_text.split('-', 1)]

        if not russian or not english:
            bot.send_message(
                message.chat.id,
                '‚ùå –û–±–∞ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!'
            )
            return

        if save_word(message.from_user.id, russian, english):
            bot.send_message(
                message.chat.id,
                f'‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: <b>{russian} - {english}</b>',
                reply_markup=types.ReplyKeyboardRemove()
            )
        else:
            bot.send_message(
                message.chat.id,
                f'‚ö†Ô∏è –°–ª–æ–≤–æ <b>{russian} - {english}</b> —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ!',
                reply_markup=types.ReplyKeyboardRemove()
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
        bot.send_message(
            message.chat.id,
            '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            reply_markup=types.ReplyKeyboardRemove()
        )

    data.pop(message.chat.id, None)
    send_welcome(message)


@bot.message_handler(func=lambda m: True)
def handle_other_messages(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    cleaned_text = clean_text(message.text)
    logging.warning(
        f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: raw='{repr(message.text)}', cleaned='{cleaned_text}'")

    bot.reply_to(message, f'ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:\n'
                          f'‚Ä¢ {MENU_BUTTONS["STUDY"]}\n'
                          f'‚Ä¢ {MENU_BUTTONS["DICTIONARY"]}\n'
                          f'‚Ä¢ {MENU_BUTTONS["ADD_WORD"]}\n'
                          f'‚Ä¢ {MENU_BUTTONS["DELETE_WORD"]}')


if __name__ == '__main__':
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    try:
        bot.infinity_polling()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")